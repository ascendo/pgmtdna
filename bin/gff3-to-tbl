#!/usr/bin/env python
# Usage: gff3-to-tbl project.gff gene-product.tsv >project.tbl
# Written by Shaun Jackman <sjackman@gmail.com>.

from BCBio import GFF
import csv
import re
import sys

locus_tag_prefix = "AAA"
protein_id_dbname = "X"

cdsid_regex = re.compile(r"_cdsid_(YP_.........\..)_")

def print_coord(f):
	""" Print the coordinates of this feature.
	"""
	if f.strand == 1:
		print "%d\t%d" % (f.location.start + 1, f.location.end)
	else:
		print "%d\t%d" % (f.location.end, f.location.start + 1)

def print_coord_override_type(f, type):
	""" Print the coordinates of this feature and a type.
	"""
	if f.strand == 1:
		print "%d\t%d\t%s" % (f.location.start + 1, f.location.end, type)
	else:
		print "%d\t%d\t%s" % (f.location.end, f.location.start + 1, type)

def print_coord_type(f):
	""" Print the coordinates and type of this feature.
	"""
	print_coord_override_type(f, f.type)

def subfeatures(f):
	""" Iterate over the subfeatures of this feature.
	"""
	if f.strand == 1:
		return f.sub_features
	else:
		return reversed(f.sub_features)

def print_mrna(f, locus_tag, product):
	""" Print a mRNA feature.
	"""
	if len(f.sub_features) == 0:
		return
	count = 0
	for sf in subfeatures(f):
		if sf.type != 'CDS':
			continue
		count += 1
		if count == 1:
			print_coord_type(sf)
		else:
			print_coord(sf)
	name = f.qualifiers['Name'][0]
	gene = name.partition('|')[0]
	print "\t\t\tproduct\t%s" % product
	print "\t\t\tprotein_id\tgnl|%s|%s" % (protein_id_dbname, locus_tag)
	if 'exception' in f.qualifiers:
		print "\t\t\texception\t%s" % f.qualifiers['exception'][0]
	# Check whether the Name contains a RefSeq identifier of a similar protein.
	match = cdsid_regex.search(name)
	if match:
		print "\t\t\tinference\tsimilar to AA sequence:RefSeq:%s" % match.group(1)

def print_introns(f):
	for sf in subfeatures(f):
		if sf.type == 'intron':
			print_coord_type(sf)

def trans_spliced(f):
	""" Return whether this feature is trans-spliced.
	"""
	return ('exception' in f.qualifiers
		and f.qualifiers['exception'][0] == 'trans-splicing')

def print_gene(f, gene_product_table):
	""" Print a gene feature.
	"""
	if trans_spliced(f):
		# Print the coordinates of the trans-spliced mRNA.
		count = 0
		for sf in subfeatures(f):
			count += 1
			if count == 1:
				print_coord_override_type(sf, 'gene')
			else:
				print_coord(sf)
	else:
		print_coord_type(f)

	name = f.qualifiers['Name'][0].rpartition('-gene')[0]
	gene = name.partition('|')[0]
	locus_tag = "%s_%s" % (locus_tag_prefix, f.qualifiers['ID'][0])
	product = gene_product_table[gene]
	print "\t\t\tgene\t%s" % gene
	print "\t\t\tlocus_tag\t%s" % locus_tag
	if 'exception' in f.qualifiers:
		print "\t\t\texception\t%s" % f.qualifiers['exception'][0]

	for sf in subfeatures(f):
		if sf.type == 'mRNA':
			print_mrna(sf, locus_tag, product)
			print_introns(sf)
		elif sf.type == 'rRNA':
			print_coord_type(sf)
			size = name.partition('rrn')[2]
			print "\t\t\tproduct\t%s" % product
			print_introns(sf)
		elif sf.type == 'tRNA':
			print_coord_type(sf)
			aa = name[3]
			anticodon = name.partition('-')[2]
			print "\t\t\tproduct\t%s" % product
			print "\t\t\tnote\tanticodon:%s" % anticodon
			print_introns(sf)

def main(gff_file, gene_product_file):
	gene_product_table = {}
	with open(gene_product_file) as tsvfile:
		reader = csv.reader(tsvfile, dialect = "excel-tab")
		header = reader.next()
		assert header == ["gene", "product"]
		for row in reader:
			gene_product_table[row[0]] = row[1]

	for rec in GFF.parse(gff_file):
		print ">Feature %s" % rec.id
		seen = {}
		for f in rec.features:
			if f.type != 'gene':
				continue
			if trans_spliced(f):
				# Skip the second copy of the trans-spliced gene.
				child = f.sub_features[0].qualifiers['ID'][0]
				if child in seen:
					continue
				seen[child] = True
			print_gene(f, gene_product_table)

if __name__ == "__main__":
	main(*sys.argv[1:])
